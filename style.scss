/* Definitions */
@mixin small {
  @media screen and (max-width: 520px) {
    @content;
  }
}

@mixin big {
  @media screen and (min-width: 800px) {
    @content;
  }
}

$font-size: 14px;
$menu-height: 48px;
$combinator-height: 96px;
$combinator-op-size: 30px;
$combinator-op-font-size: 20px;

$color-edit: #fff;
$color-edit-bg: #123;
$color-edit-menu: #fff;
$color-edit-menu-bg: #00bcd4;
$color-run-bg: #222;
$color-run-menu: #e69100;
$color-run-menu-bg: #333;
$color-op-bg: #333;
$color-op-bg-hover: #444;

$color-dark-red: #610704;
$color-dark-blue: #223c55;
$color-dark-yellow: #443d22;
$color-dark-green: #252;

$color-light-red: #f55;
$color-light-blue: #8be;
$color-light-yellow: #ff3;
$color-light-green: #3e3;

$color-cta: $color-run-menu;

$z-underlay: 1;
$z-thumbnail: 2;
$z-overlay: 3;
$z-detail: 4;


/* Generics and Reset */
* {
  margin: 0;
  padding: 0;
}

html {
  width: 100%;
  height: 100%;
}

body {
  width: 100%;
  height: 100%;
  margin: 0px;
  color: #fff;
  font-family: 'Overpass Mono', monospace;
  font-size: $font-size;
  line-height: $font-size;
}

.hidden {
  display: none;
}


/* Menu */
.menu {
  position: relative;
  height: $menu-height;
  overflow: hidden;
  white-space: pre;
  z-index: 1;
  box-shadow: 0 0px 4px black;
  transition: background 0.3s ease-in-out;
  .btn {
    display: inline-block;
    position: relative;
    width: 24px;
    height: $menu-height;
    padding: 0 10px;
    cursor: pointer;
    user-select: none;
    text-decoration: none;
    transition: background 0.3s ease-out;
    &.right {
      float: right;
    }
    &:hover {
      background: rgba(255, 255, 255, 0.16);
    }
    .icon {
      font-size: 24px;
      line-height: 100%;
      top: 5px;
      left: 0;
      right: 0;
      text-align: center;
      position: absolute;
    }
    .text {
      font-size: 10px;
      line-height: 100%;
      bottom: 5px;
      left: 0;
      right: 0;
      text-align: center;
      position: absolute;
    }
  }  
  .edit .btn {
    color: $color-edit-menu;
  }
  .run .btn {
    color: $color-run-menu;
  }
}


/* Editor */
.editor-wrapper {
  width: 100%;
  height: 100%;
  transition: background 0.3s ease-in-out;
  .editor {
    position: absolute;
    top: $menu-height;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow-y: scroll;
    transition: left 0.3s ease-out;
    & > textarea {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      padding: 2px 10px;
      box-sizing: border-box;
      background: transparent;
      color: $color-edit;
      border: none;
      font-family: 'Overpass Mono', monospace;
      font-size: $font-size;
      line-height: $font-size + 2px;
      resize: none;
    }
  }
  &.editing {
    background: $color-edit-bg;
    .menu {
      background: $color-edit-menu-bg;
    }
  }
  &.running {
    background: $color-run-bg;
    .menu {
      background: $color-run-menu-bg;
    }

  }
  body.fatal & {
    .menu {
      background-color: red;
      .mode {
        display: none;
      }
      &::after {
        content: "Fatal error";
        display: block;
        width: 100%;
        line-height: $menu-height;
        height: $menu-height;
        text-align: center;
      }
    }
  }
}


/* Mode (for animated swipe transitions) */
.mode {
  position: absolute;
  width: 100%;
  &.edit {
    left: -100%;
    opacity: 0;
    transition:
        left 0.3s ease-in,
        opacity 0.3s ease-in;
  }
  &.run {
    left: 100%;
    opacity: 0;
    transition:
        left 0.3s ease-in,
        opacity 0.3s ease-in;
  }
}
.editing .mode.edit,
.running .mode.run {
  left: 0;
  opacity: initial;
  transition:
      left 0.3s ease-out,
      opacity 0.3s ease-out;
}
.fatal-error-message {
  position: absolute;
  top: $menu-height;
  width: 100%;
  left: 0;
  margin: auto;
  padding: 20px 10%;
  box-sizing: border-box;
  background: rgba(255, 0, 0, 0.8);
}


/* Signals (common) */
.value {
  color: #fff;
}
.signal {
  color: $color-light-blue;
  &.all {
    color: $color-light-red;
  }
  &.any {
    color: $color-light-green;
  }
  &.each {
    color: $color-light-yellow;
  }
}


/* State Table */
.state {
  overflow-x: hidden;
  overflow-y: scroll;
  height: 100%;
  padding: 10px 0;
  box-sizing: border-box;
  font-size: 12px;
  .wire {
    &.red .name {
      color: $color-light-red;
    }
    &.green .name {
      color: $color-light-green;
    }
    table {
      width: 100%;
      border-spacing: 0;
      font-size: 10px;
      line-height: normal;
      tr:nth-child(even) {
        background: #333;
      }
      .signal {
        text-align: left;
        padding-left: 5px;
        @include small {
          padding-left: 20px;
        }
      }
      .value {
        text-align: right;
        padding-right: 5px;
        @include small {
          padding-right: 20px;
        }
      }
    }
  }
}


/* Network */
.network-wrapper {
  top: $menu-height;
  bottom: 0;
  left: 0;
  .state-wrapper {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 220px;
    background: #444;
    overflow: hidden;
    @include small {
      left: 0;
      bottom: initial;
      width: 100%;
      height: 100px;
    }
    &::before {
      content: "";
      position: absolute;
      width: 100%;
      height: 10px;
      background: linear-gradient(to bottom, #444 0%,rgba(0, 0, 0, 0) 100%);
    }
    &::after {
      content: "";
      position: absolute;
      width: 100%;
      height: 10px;
      bottom: 0;
      background: linear-gradient(to top, #444 0%,rgba(0, 0, 0, 0) 100%);
    }
  }
  .network  {
    margin-right: 220px;
    padding: 10px 5px;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    @include small {
      margin-right: 0px;
      top: 100px;
    }
    .segments {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      pointer-events: none;
      &.underlay {
        z-index: $z-underlay;
      }
      &.overlay {
        z-index: $z-overlay;
      }
    }
  }
}

/* Combinators */
@mixin combinator-colors($bg, $thumb-op, $detail-op) {
  &.thumbnail {
    &::before {
      background: $bg;
    }
    .operator {
      border-color: $thumb-op;
      color: $thumb-op;
    }
  }
  &.detail {
    background: $bg;
    .operator {
      color: $detail-op;
    }
  }
}

.combinator {
  box-sizing: border-box;
  overflow: hidden;
  
  .operator {
    font-weight: bold;
  }

  &.thumbnail {
    position: absolute;
    width: 20%;
    height: $combinator-height;
    z-index: $z-thumbnail;
    .operator, .button {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: $combinator-op-font-size;
      text-align: center;
      background: $color-op-bg;
      height: $combinator-op-size;
      width: $combinator-op-size;
      line-height: $combinator-op-size;
      border-radius: 5px;
      border: 2px solid white;
    }  
		  &::before {
		    content: '';
		    border-radius: 5px;
		    position: absolute;
		    top: 5px;
		    bottom: 5px;
		    left: 15px;
		    right: 15px;
		  }
  }
  &.detail {
    display: none;
    z-index: $z-detail;
  }
  
  &.constant {
    @include combinator-colors($color-dark-red, black, black);
  }
  &.pulse {
    .button {
      border-color: $color-cta;
      cursor: pointer;
      user-select: none;
      color: $color-cta;
      &:hover {
        background: $color-op-bg-hover;
      }
      .icon.active {
        display: none;
      }
    }
    &.active {
      @include combinator-colors($color-dark-red, black, black);
      .button {
        .icon.active {
          display: initial;
        }
        .icon.inactive {
          display: none;
        }
      }
    }
  }
  &.toggle {
    .button {
      height: 2 * $combinator-op-size;
      border-color: $color-cta;
      cursor: pointer;
      user-select: none;
      color: $color-cta;
      &:hover {
        background: $color-op-bg-hover;
      }
      &::after {
        background: $color-cta;
        content: '';
        position: absolute;
        top: $combinator-op-size;
        left: 0;
        right: 0;
        height: $combinator-op-size;
        transition: top 0.3s ease-in-out;
      }
    }
    &.active {
      @include combinator-colors($color-dark-red, black, black);
      .button {
        &::after {
          top: 0;
        }
      }
    }
  }
  &.arithmetic {
    @include combinator-colors($color-dark-blue, $color-dark-yellow, $color-light-yellow);
  }
  &.decider {
    @include combinator-colors($color-dark-yellow, $color-dark-green, $color-light-green);
  }
  &.display {
    @include combinator-colors($color-dark-green, black, black);
    .value {
      transform: rotate(90deg);
    }
  }
  &.label {
    white-space: pre-line;
    &.h1 {
      font-size: 2em;
      line-height: 100%;
    }
    &.h2 {
      font-size: 1.5em;
      line-height: 100%;
    }
  }
}